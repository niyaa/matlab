function fem2d_poisson_rectangle ( )

clear all

  element_order = 3;
  nq = 2;
  nqe = 13;
  nx = 3;
  ny = 3;

  element_num = ( nx - 1 ) * ( ny - 1 ) * 2;
  node_num = nx*ny;

  xl = 0.0;
  xr = 1.0;
  yb = 0.0;
  yt = 1.0;

  timestamp ( );
  fprintf ( 1, '\n' );
  fprintf ( 1, 'FEM2D_POISSON_RECTANGLE:\n' );

  fprintf ( 1, '  MATLAB version\n' );
  fprintf ( 1, '  Solution of the Poisson equation in the unit square\n' );
  fprintf ( 1, '  in 2 dimensions.\n' );
  fprintf ( 1, '\n' );
  fprintf ( 1, '  - Uxx - Uyy = F(x,y) in the box\n' );
  fprintf ( 1, '       U(x,y) = G(x,y) on the boundary.\n' );
  fprintf ( 1, '\n' );
  fprintf ( 1, '  The finite element method is used.\n' );
  fprintf ( 1, '  Triangular elements are used, of order %d.\n', element_order );
  fprintf ( 1, '\n' );
  fprintf ( 1, '  The corner nodes of the triangles are generated by an\n' );
  fprintf ( 1, '  underlying grid whose dimensions are\n' );
  fprintf ( 1, '\n' );
  fprintf ( 1, '  NX =                       %d\n', nx );
  fprintf ( 1, '  NY =                       %d\n', ny );
  fprintf ( 1, '\n' );
  fprintf ( 1, '  Number of nodes =          %d\n', node_num );
  fprintf ( 1, '  Number of elements =       %d\n', element_num );
%
%  Set the XY coordinates of the nodes.
%
  node_xy = xy_set ( nx, ny, node_num, xl, xr, yb, yt );

  element_node = grid_t6 ( nx, ny, element_order, element_num );
%
%  Set the quadrature rule for assembly.
%
  [ wq, xq, yq ] = quad_a ( node_xy, element_node, element_num, node_num, ...
    element_order );
%
%  Determine the areas of the elements.
%
  element_area = area_set ( node_xy, element_num, element_node );
%
%  Determine the bandwidth of the coefficient matrix.
%
  ib = bandwidth ( element_order, element_num, element_node );

  fprintf ( 1, '  The matrix bandwidth is    %d\n', 3 * ib + 1 );
%
%  Assemble the coefficient matrix A and the right-hand side F of the
%  finite element equations.
%
  tic

  [ a, f ] = assemble ( node_num, node_xy, element_order, element_num, ...
    element_node, nq, wq, xq, yq, element_area );

  wtime = toc;

  fprintf ( 1, '\n' );
  fprintf ( 1, '  Matrix assembly time = %f seconds.\n', wtime );
%
%  Modify the coefficient matrix and right hand side to account for
%  boundary conditions.
%
  [ a, f ] = boundary ( nx, ny, node_num, node_xy, ib, a, f );
%
%  Solve the linear system using a banded solver.
%
  tic;

  c = a \ f';

  wtime = toc;

  fprintf ( 1, '\n' );
  fprintf ( 1, '  Linear system factor and solve time = %f seconds.\n', wtime );

  if ( 0 )
    r8vec_print_some ( node_num, f, 1, 5, '  Part of the solution vector:' );
  end
%
%  Calculate error using 13 point quadrature rule.
%
  errors ( element_area, element_node, node_xy, ...
    c, element_num, element_order, nqe, node_num );

  if ( 0 )
    compare ( node_num, node_xy, c );
  end
%
%  Write ASCII files.
%`
  node_filename = 'rectangle_nodes.txt';

  r8mat_write ( node_filename, 2, node_num, node_xy );

  fprintf ( 1, '\n' );
  fprintf ( 1, '  Wrote the node file "%s"\n', node_filename );

  triangulation_filename = 'rectangle_elements.txt';

  i4mat_write ( triangulation_filename, element_order, element_num, element_node );

  fprintf ( 1, '  Wrote the element file "%s"\n', triangulation_filename );

  solution_filename = 'rectangle_solution.txt';

  r8mat_write ( solution_filename, node_num,1, c );

  fprintf ( 1, '  Wrote the solution file "%s"\n', solution_filename );
%
%  Terminate.
%
  fprintf ( 1, '\n' );
  fprintf ( 1, 'FEM2D_POISSON_RECTANGLE:\n' );
  fprintf ( 1, '  Normal end of execution.\n' );

  fprintf ( 1, '\n' );
  timestamp ( );
  compare ( node_num, node_xy, c );

  return
end